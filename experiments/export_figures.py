"""
Export Figures Script

This script collects figures from notebooks and organizes them for documentation.
Updates results log with experiment summaries.
"""

import os
import shutil
import glob
import json
from datetime import datetime
from typing import Dict, List, Optional


def collect_notebook_figures() -> Dict[str, List[str]]:
    """Collect all figures generated by notebooks"""
    figures_by_experiment = {}
    
    # Check if figures directory exists
    if not os.path.exists('figures'):
        os.makedirs('figures')
        print("Created figures directory")
        return figures_by_experiment
    
    # Find all PNG files in figures directory
    figure_files = glob.glob('figures/*.png')
    
    # Organize by experiment
    experiments = ['KS1', 'KS2', 'KS3', 'KS4']
    
    for exp in experiments:
        exp_figures = [f for f in figure_files if exp in os.path.basename(f)]
        if exp_figures:
            figures_by_experiment[exp] = exp_figures
    
    return figures_by_experiment


def create_figure_index(figures_by_exp: Dict[str, List[str]]) -> None:
    """Create an index of all generated figures"""
    index_path = 'figures/figure_index.md'
    
    with open(index_path, 'w') as f:
        f.write("# Generated Figures Index\n\n")
        f.write(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        if not figures_by_exp:
            f.write("No figures found.\n")
            return
        
        for exp, figures in figures_by_exp.items():
            f.write(f"## {exp} Experiment\n\n")
            
            for fig_path in sorted(figures):
                fig_name = os.path.basename(fig_path)
                f.write(f"- `{fig_name}`\n")
            
            f.write("\n")
        
        f.write("---\n")
        f.write("Generated by `scripts/export_figures.py`\n")
    
    print(f"Created figure index: {index_path}")


def update_results_log(figures_by_exp: Dict[str, List[str]]) -> None:
    """Update the results log with current run information"""
    log_path = 'docs/results_log.md'
    
    # Ensure docs directory exists
    os.makedirs('docs', exist_ok=True)
    
    # Create entry for this run
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # Try to get git commit hash
    try:
        import subprocess
        commit_hash = subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD']).decode().strip()
    except:
        commit_hash = "unknown"
    
    entry = f"""
## Run: {timestamp}

**Commit:** `{commit_hash}`

**Experiments Run:**
"""
    
    if figures_by_exp:
        for exp, figures in figures_by_exp.items():
            entry += f"- {exp}: {len(figures)} figures generated\n"
    else:
        entry += "- No figures generated (check for errors)\n"
    
    entry += f"""
**Status:** {'COMPLETED' if figures_by_exp else 'PARTIAL - CHECK ERRORS'}

**Notes:** 
- Full test suite executed via `scripts/run_all.sh`
- Figures available in `figures/` directory
- See individual notebooks for detailed results and pass/fail status

---

"""
    
    # Read existing log or create new
    if os.path.exists(log_path):
        with open(log_path, 'r') as f:
            existing_content = f.read()
    else:
        existing_content = """# Results Log

This file tracks execution results for the capacity-time dilation experiments.

"""
    
    # Insert new entry at the top (after header)
    lines = existing_content.split('\n')
    header_end = 0
    for i, line in enumerate(lines):
        if line.startswith('---') or line.startswith('##'):
            header_end = i
            break
    
    if header_end == 0:
        # No existing entries, add after initial header
        new_content = existing_content + entry
    else:
        # Insert before first entry
        new_content = '\n'.join(lines[:header_end]) + entry + '\n'.join(lines[header_end:])
    
    with open(log_path, 'w') as f:
        f.write(new_content)
    
    print(f"Updated results log: {log_path}")


def create_experiment_summary() -> None:
    """Create a quick summary file for the run_all.sh script"""
    summary_path = 'figures/experiment_summary.txt'
    
    # Count figures by experiment
    figures_by_exp = collect_notebook_figures()
    
    with open(summary_path, 'w') as f:
        f.write("CAPACITY-TIME DILATION EXPERIMENTS\n")
        f.write("===================================\n\n")
        
        if figures_by_exp:
            f.write("Generated Figures:\n")
            for exp, figures in figures_by_exp.items():
                f.write(f"  {exp}: {len(figures)} plots\n")
        else:
            f.write("No figures generated - check for errors\n")
        
        f.write(f"\nTimestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        
        # Add quick interpretation guide
        f.write("\nQuick Results Guide:\n")
        f.write("  - Check notebook outputs for KS-1 through KS-4 PASS/FAIL status\n")
        f.write("  - KS-1 success: DB²/θ² ratio approximately constant\n") 
        f.write("  - KS-2 success: Moving patterns show higher demand than stationary\n")
        f.write("  - KS-3 success: Back-reaction creates observable trajectory differences\n")
        f.write("  - KS-4 success: Response kernels show spatial structure with symmetry\n")
    
    print(f"Created experiment summary: {summary_path}")


def organize_figures() -> None:
    """Organize figures into subdirectories by experiment"""
    figures_by_exp = collect_notebook_figures()
    
    if not figures_by_exp:
        print("No figures to organize")
        return
    
    # Create subdirectories
    for exp in figures_by_exp.keys():
        exp_dir = f'figures/{exp}'
        os.makedirs(exp_dir, exist_ok=True)
        
        # Move figures to subdirectory
        for fig_path in figures_by_exp[exp]:
            fig_name = os.path.basename(fig_path)
            new_path = f'{exp_dir}/{fig_name}'
            
            # Only move if not already in subdirectory
            if fig_path != new_path:
                shutil.move(fig_path, new_path)
                print(f"Moved {fig_name} to {exp_dir}/")


def main():
    """Main export function"""
    print("Exporting figures and updating documentation...")
    
    # Collect figures
    figures_by_exp = collect_notebook_figures()
    print(f"Found figures for experiments: {list(figures_by_exp.keys())}")
    
    # Create documentation
    create_figure_index(figures_by_exp)
    update_results_log(figures_by_exp)
    create_experiment_summary()
    
    # Optional: organize into subdirectories (uncomment if desired)
    # organize_figures()
    
    print("\nFigure export completed!")
    
    if figures_by_exp:
        total_figures = sum(len(figs) for figs in figures_by_exp.values())
        print(f"Total figures: {total_figures}")
        print("Check docs/results_log.md for detailed run information")
    else:
        print("Warning: No figures found. Check notebook execution for errors.")


if __name__ == "__main__":
    main()
